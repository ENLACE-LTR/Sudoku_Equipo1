namespace ASR1
{
    class Program
    {
        static string[,] sudoku = new string[10, 10];  //arreglo del sudoku
        static Dictionary<string, ConsoleColor> colores = new Dictionary<string, ConsoleColor>();
        static Random random = new Random();
        static bool jugar = true;
        static void Main() //iniciar estado base del juego
        {
            PrimordialState();
            while (jugar)
            {
                IniciarJuego();
            }
        }
        static void IniciarJuego()
        {
            Console.WriteLine("!!!BIENVENIDO AL JUEGO DEL SUDOKU!!!");
            Console.WriteLine("PARA JUGAR TIENES QUE INGRESAR UN NUMERO DE 3 DIGITOS");
            Console.WriteLine("EL PRIMER NUMERO ES EL NUMERO A COLOCAR, EL 0 NO JUEGA");
            Console.WriteLine("EL SEGUNDO ES EL NUMERO DE COLUMNA");
            Console.WriteLine("EL TERCERO ES EL NUMERO DE FILA");
            Console.WriteLine("511 COLOCARIA EL NUMERO 5 EN LA POSICION 1,1");
            DesicionJugador();
        }
        static void DesicionJugador() //seleccionar si deseas jugar o no
        {
            Console.WriteLine("QUIERES INICIAR?");
            Console.WriteLine("A) SI");
            Console.WriteLine("B) NO");
            string opcion = Console.ReadLine();
            switch (opcion.ToLower())
            {
                case "a":
                    InicializarNumerosAleatorios();
                    ImprimirSudoku();
                    Jugar();
                    break;
                case "b":
                    Console.WriteLine("GRACIAS POR JUGAR, VUELVA PRONTO...");
                    jugar = false;
                    break;
                default:
                    Console.WriteLine("OPCION INCORRECTA, REINTENTALO...");
                    DesicionJugador();
                    break;
            }
        }
        static void Jugar()//realizar mov
        {
            Console.WriteLine("Realiza el un movimiento...");
            string input = "";
            input = Console.ReadLine();
            ComprobacionInputJugador(input);
        }
        static void ComprobacionInputJugador(string input)
        {
            if (input.Length > 3 || input.Length < 3)
            {
                Console.WriteLine("Numero ingresado erroneo, reintentalo...");
                Jugar();
            }
            else // verificar que los valores sean correctos
            {
                string pos1 = input[0].ToString();
                string pos2 = input[1].ToString();
                string pos3 = input[2].ToString();
                if (pos1 != "1" && pos1 != "2" && pos1 != "3" && pos1 != "4" && pos1 != "5" && pos1 != "6" && pos1 != "7" && pos1 != "8" && pos1 != "9")
                {
                    Console.WriteLine("Numero ingresado erroneo, reintentalo...");
                    Jugar();
                }
                if ((pos2 != "1" && pos2 != "2" && pos2 != "3" && pos2 != "4" && pos2 != "5" && pos2 != "6" && pos2 != "7" && pos2 != "8" && pos2 != "9") ||
                    (pos3 != "1" && pos3 != "2" && pos3 != "3" && pos3 != "4" && pos3 != "5" && pos3 != "6" && pos3 != "7" && pos3 != "8" && pos3 != "9"))
                {
                    Console.WriteLine("Posicion incorrecta, reintentalo...");
                    Jugar();
                }
                VerificarInpunt(pos1, int.Parse(pos2), int.Parse(pos3), true);
            }
        }
        static bool VerificarInpunt(string numero, int posX, int posY, bool isPlayer)
        {
            bool error = false;
            for (int i = 1; i < 10; i++)
            {
                if (sudoku[posX, i] == numero || sudoku[i, posY] == numero)
                {
                    error = true;
                    if (isPlayer)
                    {
                        Console.WriteLine("Accion incorrecta, vuelve a intentarlo");
                        Jugar();
                    }
                    else
                    {
                        return error;
                    }
                }
            }
            if (!error)

            {
                string pos = posX.ToString();
                pos += posY.ToString();
                ConsoleColor colorPos = colores[pos];
                switch (colorPos) //dar color en base a la posicion jugada
                {
                    case ConsoleColor.Green:
                        for (int i = 10; i < 31; i += 10)
                        {
                            for (int j = 1; j < 4; j++)
                            {
                                string newPos = (i + j).ToString();
                                if (sudoku[int.Parse(newPos[0].ToString()), int.Parse(newPos[1].ToString())] == numero)
                                {
                                    error = true;
                                    if (isPlayer)
                                    {
                                        Console.WriteLine("Accion incorrecta, vuelve a intentarlo");
                                        Jugar();
                                    }
                                }
                            }
                        }
                        break;
                    case ConsoleColor.Yellow:
                        for (int i = 10; i < 31; i += 10)
                        {
                            for (int j = 4; j < 7; j++)
                            {
                                string newPos = (i + j).ToString();
                                if (sudoku[int.Parse(newPos[0].ToString()), int.Parse(newPos[1].ToString())] == numero)
                                {
                                    error = true;
                                    if (isPlayer)
                                    {
                                        Console.WriteLine("Accion incorrecta, vuelve a intentarlo");
                                        Jugar();
                                    }
                                }
                            }
                        }
                        break;
                    case ConsoleColor.Red:
                        for (int i = 10; i < 31; i += 10)
                        {
                            for (int j = 7; j < 10; j++)
                            {
                                string newPos = (i + j).ToString();
                                if (sudoku[int.Parse(newPos[0].ToString()), int.Parse(newPos[1].ToString())] == numero)
                                {
                                    error = true;
                                    if (isPlayer)
                                    {
                                        Console.WriteLine("Accion incorrecta, vuelve a intentarlo");
                                        Jugar();
                                    }
                                }
                            }
                        }
                        break;
                    case ConsoleColor.Cyan:
                        for (int i = 40; i < 61; i += 10)
                        {
                            for (int j = 1; j < 4; j++)
                            {
                                string newPos = (i + j).ToString();
                                if (sudoku[int.Parse(newPos[0].ToString()), int.Parse(newPos[1].ToString())] == numero)
                                {
                                    error = true;
                                    if (isPlayer)
                                    {
                                        Console.WriteLine("Accion incorrecta, vuelve a intentarlo");
                                        Jugar();
                                    }
                                }
                            }
                        }
                        break;
                    case ConsoleColor.Magenta:
                        for (int i = 40; i < 61; i += 10)
                        {
                            for (int j = 4; j < 7; j++)
                            {
                                string newPos = (i + j).ToString();
                                if (sudoku[int.Parse(newPos[0].ToString()), int.Parse(newPos[1].ToString())] == numero)
                                {
                                    error = true;
                                    if (isPlayer)
                                    {
                                        Console.WriteLine("Accion incorrecta, vuelve a intentarlo");
                                        Jugar();
                                    }
                                }
                            }
                        }
                        break;
                    case ConsoleColor.Blue:
                        for (int i = 40; i < 61; i += 10)
                        {
                            for (int j = 7; j < 10; j++)
                            {
                                string newPos = (i + j).ToString();
                                if (sudoku[int.Parse(newPos[0].ToString()), int.Parse(newPos[1].ToString())] == numero)
                                {
                                    error = true;
                                    if (isPlayer)
                                    {
                                        Console.WriteLine("Accion incorrecta, vuelve a intentarlo");
                                        Jugar();
                                    }
                                }
                            }
                        }
                        break;
                    case ConsoleColor.DarkMagenta:
                        for (int i = 70; i < 91; i += 10)
                        {
                            for (int j = 1; j < 4; j++)
                            {
                                string newPos = (i + j).ToString();
                                if (sudoku[int.Parse(newPos[0].ToString()), int.Parse(newPos[1].ToString())] == numero)
                                {
                                    error = true;
                                    if (isPlayer)
                                    {
                                        Console.WriteLine("Accion incorrecta, vuelve a intentarlo");
                                        Jugar();
                                    }
                                }
                            }
                        }
                        break;
                    case ConsoleColor.DarkCyan:
                        for (int i = 70; i < 91; i += 10)
                        {
                            for (int j = 4; j < 7; j++)
                            {
                                string newPos = (i + j).ToString();
                                if (sudoku[int.Parse(newPos[0].ToString()), int.Parse(newPos[1].ToString())] == numero)
                                {
                                    error = true;
                                    if (isPlayer)
                                    {
                                        Console.WriteLine("Accion incorrecta, vuelve a intentarlo");
                                        Jugar();
                                    }
                                }
                            }
                        }
                        break;
                    case ConsoleColor.DarkYellow:
                        for (int i = 70; i < 91; i += 10)
                        {
                            for (int j = 7; j < 10; j++)
                            {
                                string newPos = (i + j).ToString();
                                if (sudoku[int.Parse(newPos[0].ToString()), int.Parse(newPos[1].ToString())] == numero)
                                {
                                    error = true;
                                    if (isPlayer)
                                    {
                                        Console.WriteLine("Accion incorrecta, vuelve a intentarlo");
                                        Jugar();
                                    }
                                }
                            }
                        }
                        break;
                    case ConsoleColor.White:
                        if (isPlayer)
                        {
                            Console.WriteLine("Los numeros en blanco no se pueden modificar, ingresa otra coordenada");
                            Jugar();
                        }
                        else
                        {
                            error = true;
                            return error;
                        }
                        break;

                }
            }
            if (!error && isPlayer)
            {
                sudoku[posX, posY] = numero;
                ImprimirSudoku();
                Jugar();
                return error;
            }
            return error;
        }
        static void ImprimirSudoku()//imprimir avance del juego
        {
            Console.Clear();
            for (int i = 0; i < 10; i++)
            {
                Console.WriteLine("");
                for (int j = 0; j < 10; j++)
                {
                    string pos = i.ToString();
                    pos += j.ToString();
                    Console.ForegroundColor = colores[pos];
                    Console.Write(" " + sudoku[i, j]);
                }
            }
            Console.WriteLine("");
        }
        static void PrimordialState() //estado inicial del juego
        {
            sudoku[0, 0] = " ";
            sudoku[0, 1] = "1";
            sudoku[0, 2] = "2";
            sudoku[0, 3] = "3";
            sudoku[0, 4] = "4";
            sudoku[0, 5] = "5";
            sudoku[0, 6] = "6";
            sudoku[0, 7] = "7";
            sudoku[0, 8] = "8";
            sudoku[0, 9] = "9";
            sudoku[1, 0] = "1";
            sudoku[1, 1] = "_";
            sudoku[1, 2] = "_";
            sudoku[1, 3] = "_";
            sudoku[1, 4] = "_";
            sudoku[1, 5] = "_";
            sudoku[1, 6] = "_";
            sudoku[1, 7] = "_";
            sudoku[1, 8] = "_";
            sudoku[1, 9] = "_";
            sudoku[2, 0] = "2";
            sudoku[2, 1] = "_";
            sudoku[2, 2] = "_";
            sudoku[2, 3] = "_";
            sudoku[2, 4] = "_";
            sudoku[2, 5] = "_";
            sudoku[2, 6] = "_";
            sudoku[2, 7] = "_";
            sudoku[2, 8] = "_";
            sudoku[2, 9] = "_";
            sudoku[3, 0] = "3";
            sudoku[3, 1] = "_";
            sudoku[3, 2] = "_";
            sudoku[3, 3] = "_";
            sudoku[3, 4] = "_";
            sudoku[3, 5] = "_";
            sudoku[3, 6] = "_";
            sudoku[3, 7] = "_";
            sudoku[3, 8] = "_";
            sudoku[3, 9] = "_";
            sudoku[4, 0] = "4";
            sudoku[4, 1] = "_";
            sudoku[4, 2] = "_";
            sudoku[4, 3] = "_";
            sudoku[4, 4] = "_";
            sudoku[4, 5] = "_";
            sudoku[4, 6] = "_";
            sudoku[4, 7] = "_";
            sudoku[4, 8] = "_";
            sudoku[4, 9] = "_";
            sudoku[5, 0] = "5";
            sudoku[5, 1] = "_";
            sudoku[5, 2] = "_";
            sudoku[5, 3] = "_";
            sudoku[5, 4] = "_";
            sudoku[5, 5] = "_";
            sudoku[5, 6] = "_";
            sudoku[5, 7] = "_";
            sudoku[5, 8] = "_";
            sudoku[5, 9] = "_";
            sudoku[6, 0] = "6";
            sudoku[6, 1] = "_";
            sudoku[6, 2] = "_";
            sudoku[6, 3] = "_";
            sudoku[6, 4] = "_";
            sudoku[6, 5] = "_";
            sudoku[6, 6] = "_";
            sudoku[6, 7] = "_";
            sudoku[6, 8] = "_";
            sudoku[6, 9] = "_";
            sudoku[7, 0] = "7";
            sudoku[7, 1] = "_";
            sudoku[7, 2] = "_";
            sudoku[7, 3] = "_";
            sudoku[7, 4] = "_";
            sudoku[7, 5] = "_";
            sudoku[7, 6] = "_";
            sudoku[7, 7] = "_";
            sudoku[7, 8] = "_";
            sudoku[7, 9] = "_";
            sudoku[8, 0] = "8";
            sudoku[8, 1] = "_";
            sudoku[8, 2] = "_";
            sudoku[8, 3] = "_";
            sudoku[8, 4] = "_";
            sudoku[8, 5] = "_";
            sudoku[8, 6] = "_";
            sudoku[8, 7] = "_";
            sudoku[8, 8] = "_";
            sudoku[8, 9] = "_";
            sudoku[9, 0] = "9";
            sudoku[9, 1] = "_";
            sudoku[9, 2] = "_";
            sudoku[9, 3] = "_";
            sudoku[9, 4] = "_";
            sudoku[9, 5] = "_";
            sudoku[9, 6] = "_";
            sudoku[9, 7] = "_";
            sudoku[9, 8] = "_";
            sudoku[9, 9] = "_";
            AsignarColores();
        }
    }
}
